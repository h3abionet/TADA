/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    h3abionet/TADA Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options (sample sheet)
    input                      = null
    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore            = false
    fasta                      = null// MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Workflow stage (NYI)
    // precheck = false

    // TODO: this needs to be removed or made more specific
    // amplicon = '16S'
    // platform = 'illumina'

    // QC
    // skip_FASTQC = false  // set to run this step by default, this can fail with large sample #'s
    // skip_dadaQC = false  // set to run this step by default, this can fail with large sample #'s
    // skip_multiQC = false  // set to run this step by default, this can fail with large sample #'s

    // Trimming
    // NYI: Setting to false bypasses all trimming, assumes primers are removed 
    // and sequence(s) are ready for denoising
    // trim = true
    // trim-mode = "dada2" // default: use DADA2 methods for trimming, can be 'dada2', 'cutadapt'

    // when true (default), this sets cutadapt's trimming (which uses linked adapters) to require *both* 
    // primers be present.  With some kits like StrainID this can be an issue (can have some truncated reads 
    // at the 5' or 3' end) and so can be relaxed by setting to false.
    pacbio_strict_match = true

    // setting these assumes use of cutadapt for trimming
    fwd_adapter = false 
    rev_adapter = false
    trim_for = 0
    trim_rev = 0
    trunc_for = 0
    trunc_rev = 0
    maxEE_for = 2
    maxEE_rev = 2
    truncQ = 2 //default
    maxN = 0 //default
    max_read_len = "Inf" // default, this can be coersed in R using as.numeric
    min_read_len = 50 // default
    // I think we can make these bool 'false' as above with R coersion (either through as.logical or using optparse in a Rscript)
    rmPhiX = false  

    // Error model
    qualityBinning = false  // false, set to true if using binned qualities (NovaSeq)
    errorModel = 'illumina' // NYI, thinking about best way to implement this

    // Merging
    // paired_type = "overlapping"  // allowed: 'overlapping' (paired reads overlap), 'separate' (paired reads are non-overlapping), or 'mix' (variable length)
    min_overlap = 20 // default=20
    max_mismatch = 0 // default
    trim_overhang = false // KL: I don't think we have overhangs for WISH project03
    just_concatenate = false  // TODO: test using false instead of string
    // CF: this is for rescuing unmerged ITS, should 
    // be off unless really needed, and even then it's questionable.  But it is requested sometimes
    // rescueUnmerged = false 
    dadaOpt = []
    max_asv_len = 0 // Only run if set > 1
    min_asv_len = 0 // Only run if set > 1
    // Chimera detection
    chimera_detection = true
    // removeBimeraDenovoOptions = false

    // Taxonomic assignment
    tax_assignment_method = 'rdp' // default: RDP classifier implementation in dada2
    reference = false
    species = false
    min_boot = 50 // default for dada2
    tax_levels = false
    tax_batch = 0  // batch size of ASVs to run through assignTaxonomy/assignSpecies, 0 = run everything

    // alignment
    alignment = true
    aligner = 'DECIPHER' // default
    // infernalCM  = false

    // Phylogenetic analysis
    run_tree = 'phangorn' // default, current alternative is 'fasttree'

    // for dada sample inference pooling (requires all samples)
    pool = "pseudo" // TODO: test using false instead of string

    // MultiQC
    // interactiveMultiQC = false

    // additional outputs
    to_BIOM = true  // generate BIOM v1 output
    to_QIIME2 = false  // generate QZA artifacts for QIIME2

    // Renaming
    id_type = "md5"

    // Pre-chimera sequence tables. This pulls in one or more sequence tables
    // from independent sequencing runs, merges them, and runs
    // downstream analysis. The only supported sequence table format
    // is the original version from DADA2 (ASV names are the
    // sequence, with counts per sample). As these are run through
    // chimera detection, these should be pre-chimera removal data.
    // seq_tables = false

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load h3abionet/TADA custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/tada.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/tada profiles: ${params.custom_config_base}/pipeline/tada.config")
// }
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'h3abionet/TADA'
    author          = """Chris Fields"""
    homePage        = 'https://github.com/h3abionet/TADA'
    description     = """Targeted Amplicon Diversity Analysis"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
