/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: MERGE_OVERLAP_CHECK {
        publishDir = [
            path: { "${params.outdir}/QC/TSV/MergeCheck" },
            mode: params.publish_dir_mode,
            pattern : "*.tsv"
        ]
    }

    withName: OVERLAP_HEATMAP {
        publishDir = [
                [
                    path: { "${params.outdir}/QC/Plots/" },
                    mode: params.publish_dir_mode,
                    pattern: "*.pdf"
                ],
                [
                    path: { "${params.outdir}/R/MergeCheck" },
                    mode: params.publish_dir_mode,
                    pattern: "*.RDS"
                ]
                ]
    }

    withName: PLOT_QUALITY_PROFILE {
        publishDir = [
                [
                    path: { "${params.outdir}/QC/Plots/" },
                    mode: params.publish_dir_mode,
                    pattern: "*.pdf"
                ],
                [
                    path: { "${params.outdir}/R/QualityProfile" },
                    mode: params.publish_dir_mode,
                    pattern: "*.RDS"
                ]
                ]
    }


    withName: PACBIO_CUTADAPT {
        publishDir = [
            path: { "${params.outdir}/Reads/cutadapt" },
            mode: params.publish_dir_mode
        ]

    }

    withName: ILLUMINA_DADA2_FILTER_AND_TRIM {
        publishDir = [
            path: { "${params.outdir}/Reads/filtered" },
            mode: params.publish_dir_mode
        ]
    }

    withName: PACBIO_DADA2_FILTER_AND_TRIM {
        publishDir = [
            path: { "${params.outdir}/Reads/filtered" },
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGE_TRIM_TABLES {
        publishDir = [
            path: { "${params.outdir}/Reads/Summary" },
            mode: params.publish_dir_mode
        ]
    }

    withName: ILLUMINA_DADA2_LEARN_ERRORS {
        publishDir = [
            [
                path: { "${params.outdir}/QC/Plots" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"
            ],
            [
                path: { "${params.outdir}/R" },
                mode: params.publish_dir_mode,
                pattern: "*.RDS"
            ]
        ]
    }

    withName: PACBIO_DADA2_LEARN_ERRORS {
        publishDir = [
            [
                path: { "${params.outdir}/QC/Plots" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"
            ],
            [
                path: { "${params.outdir}/R/learnErrors" },
                mode: params.publish_dir_mode,
                pattern: "*.RDS"
            ]
        ]
    }

    withName: DADA_INFER {
        publishDir = [
            path: { "${params.outdir}/R/dada" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: POOLED_SEQTABLE {
        publishDir = [
            path: { "${params.outdir}/R/SeqTable" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: DADA2_REMOVE_CHIMERAS {
        publishDir = [
            path: { "${params.outdir}/R/SeqTable" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: RENAME_ASVS {
        publishDir = [
            [
            path: { "${params.outdir}/R/SeqTable" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
            ],
            [
            path: { "${params.outdir}/TSV" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
            ],
            [
            path: { "${params.outdir}/ASV" },
            mode: params.publish_dir_mode,
            pattern: "*.fna"
            ]
        ]
    }

    withName: DADA2_ASSIGN_TAXA_SPECIES {
        publishDir = [
            path: { "${params.outdir}/R/TaxTable" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: DECIPHER {
        publishDir = [
            path: { "${params.outdir}/R/Alignment" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: PHANGORN {
        publishDir = [
            path: { "${params.outdir}/R/Tree" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: FASTTREE {
        publishDir = [
            path: { "${params.outdir}/R/Tree" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: ROOT_TREE {
        publishDir = [
            path: { "${params.outdir}/R/Tree" },
            mode: params.publish_dir_mode,
            pattern: "*.RDS"
        ]
    }

    withName: READ_TRACKING {
        publishDir = [
                path: { "${params.outdir}/QC/ReadTracking" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
    }

    withName: PLOT_MERGED_HEATMAP {
        publishDir = [
            [
                path: { "${params.outdir}/QC/Plots" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"
            ],
            publishDir = [
                path: { "${params.outdir}/R/QC" },
                mode: params.publish_dir_mode,
                pattern: "*.RDS"
            ]
        ]
    }

    withName: PLOT_ASV_DIST {
        publishDir = [
            [
                path: { "${params.outdir}/QC/Plots" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"
            ],
            publishDir = [
                path: { "${params.outdir}/R/QC" },
                mode: params.publish_dir_mode,
                pattern: "*.RDS"
            ]
        ]
    }

    withName: DADA2_SEQTABLE2TEXT {
        publishDir = [
            path: { "${params.outdir}/TSV" },
            mode: params.publish_dir_mode,
            pattern: 'seqtab_final.txt'
        ]
    }

    withName: DADA2_TAXTABLE2TEXT {
        publishDir = [
            path: { "${params.outdir}/TSV" },
            mode: params.publish_dir_mode,
            pattern: 'tax_final*.txt'
        ]
    }

    withName: BIOM {
        publishDir = [
            path: { "${params.outdir}/BIOM" },
            mode: params.publish_dir_mode,
            pattern: '*.biom'
        ]
    }

    withName: "QIIME2_*" {
        publishDir = [
            path: { "${params.outdir}/QIIME2" },
            mode: params.publish_dir_mode,
            pattern: '*.qza'
        ]
    }

    withName: SESSION_INFO {
        publishDir = [
            path: { "${params.outdir}/Session" },
            mode: params.publish_dir_mode,
            pattern: '*.Rmd'
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
