/*
 * ------------------------------------------------------------
 *  University of Illinois Biocluster - Singularity Test config
 * ------------------------------------------------------------
 */

base = 'UIUC-HPCBio'

singularity {
    enabled = true
    singularity.autoMounts = true
}

process {
    // Global process config
    executor = 'slurm'
    clusterOptions = { "-A $params.project ${params.clusterOptions ?: ''}" }

    // NB: Overwrite this in a config file in the working directory (nextflow.config) or with -c

    // Environment modules and resource requirements
    // TODO: syntax will need to be changed for Nextflow 0.31.0 and higher:
    // https://www.nextflow.io/docs/latest/config.html#process-selectors

    // TODO: check singularity mounting options
    // stageInMode = 'symlink'
    // stageOutMode = 'rsync'
    
    queue = 'hpcbio'
    // clusterOptions = { "-M $params.email -m abe -l nodes=1:ppn=1:series600" }
    // clusterOptions = { "-M $params.email -m abe" }
    
    container='file:///igbgroup/groups/hpcbio/singularity/dada2-workflow_2020.02.sif'
    module = "singularity/3.4.1-hpcbio"

    withName: runFastQC {
        container='file:///igbgroup/groups/hpcbio/singularity/h3a16s-fastqc_latest.sif'
    }

    withName: runMultiQC {
        container='file:///igbgroup/groups/hpcbio/singularity/h3a16s-fastqc_latest.sif'
    }

    withName: runFastQC_postfilterandtrim {
        container='file:///igbgroup/groups/hpcbio/singularity/h3a16s-fastqc_latest.sif'
    }

    withName: runMultiQC_postfilterandtrim {
        container='file:///igbgroup/groups/hpcbio/singularity/h3a16s-fastqc_latest.sif'
    }

    withName: itsFilterAndTrimStep2 {
        container='file:///igbgroup/groups/hpcbio/singularity/cutadapt_2.10--py38h0213d0e_1.sif'
    }

    withName:PoolSamplesInferDerepAndMerge {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName:RemoveChimeras {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName:AssignTaxSpeciesRDP {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName:AssignTaxonomyRDP {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName:TaxonomyIDTAXA {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }
    withName:AlignReadsDECIPHER {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 24.h * task.attempt, 'time' ) }
    }

    withName: GenerateTreeFasttree {
        container='file:///igbgroup/groups/hpcbio/singularity/fasttree_2.1.10--h14c3975_3.sif'
    }

    withName:toQIIME2FeatureTable {
        container = 'file:///igbgroup/groups/hpcbio/singularity/qiime2_latest.sif'
    }
    withName:toQIIME2TaxTable {
        container = 'file:///igbgroup/groups/hpcbio/singularity/qiime2_latest.sif'
    }
    withName:toQIIME2Seq {
        container = 'file:///igbgroup/groups/hpcbio/singularity/qiime2_latest.sif'
    }
    withName:toQIIME2Aln {
        container = 'file:///igbgroup/groups/hpcbio/singularity/qiime2_latest.sif'
    }
    withName:toQIIME2Tree {
        container = 'file:///igbgroup/groups/hpcbio/singularity/qiime2_latest.sif'
    }

    // PacBio-specific
    
    withName:PacBioLearnErrors {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName:PacBioPoolSamplesInferDerep {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
		time = { check_max( 36.h * task.attempt, 'time' ) }
    }

    // Loop-specific
    
    withName:LoopLearnErrors {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
        time = { check_max( 18.h * task.attempt, 'time' ) }
    }

    withName:LoopPoolSamplesInferDerep {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
        time = { check_max( 18.h * task.attempt, 'time' ) }
    }
}

executor{
   jobName = { "$task.tag" }
   queueSize = 6
}

params {
   max_memory = 256.GB
   max_cpus = 64
   max_time = 1000.h
}
